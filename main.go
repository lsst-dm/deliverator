package main

import (
	"errors"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"time"

	chi "github.com/go-chi/chi/v5"
	httpSwagger "github.com/swaggo/http-swagger/v2"

	"github.com/lsst-dm/s3nd/conf"
	"github.com/lsst-dm/s3nd/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/lsst-dm/s3nd/upload"
	"github.com/lsst-dm/s3nd/version"
)

// @title s3nd|The Deliverator API

// @contact.name Support
// @contact.url https://github.com/lsst-dm/s3nd

// @license.name GPL-3.0
// @license.url https://www.gnu.org/licenses/gpl-3.0.en.html

// swagger requires a version is set in the openapi spec.
// @version 0.0.0

func main() {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, nil))
	slog.SetDefault(logger)

	// set the version displayed in the swagger UI.
	docs.SwaggerInfo.Version = version.Version

	conf := conf.NewConf(version.Version)

	logger.Info("starting s3nd", "version", version.Version)

	r := chi.NewRouter()
	r.Get("/swagger/*", httpSwagger.Handler())
	r.Handle("/version", version.NewHandler(&conf))
	r.Handle("/upload", upload.NewHandler(&conf))

	addr := fmt.Sprintf("%s:%d", *conf.Host, *conf.Port)
	logger.Info("listening", "address", addr)

	s := &http.Server{
		Addr:         addr,
		ReadTimeout:  60 * time.Second,
		WriteTimeout: 60 * time.Second,
		Handler:      r,
	}

	err := s.ListenAndServe()
	if errors.Is(err, http.ErrServerClosed) {
		logger.Info("server closed")
	} else if err != nil {
		logger.Error("failed to start server", "error", err)
		os.Exit(1)
	}
}
